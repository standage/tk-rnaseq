#!/usr/bin/make -f

# Copyright (c) 2013, Daniel S. Standage <daniel.standage@gmail.com>
#
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.


# ------------------------------------------------------------------------------
#
# ------------------------------------------------------------------------------


SHELL := /usr/bin/env bash
MKFILE=$(word $(words $(MAKEFILE_LIST)),$(MAKEFILE_LIST))
BINDIR=$(shell dirname $(MKFILE))
define PROG_USAGE
workdir=.

build-table: build a table of gene/transcript expression data including fold
             changes, reads mapped, and expression values

Usage: build-table [options] ebseqinfile=rsem.output.txt   \
                             ebseqoutfile=ebseq.output.txt \
                             fasta=sequences.fa            \
                             bamfilepattern=/path/to/data/my.species.*.bam all
  Options:
    output         file to which output will be written; default is
                   $(workdir)/expression-data.txt
    parallel=yes   run certain steps in parallel; will attempt to utilize N
                   cores, where N is the number of samples
    workdir=DIR    director in which to place temporary files and, by default,
                   the output file; default is current directory

endef
export PROG_USAGE


# Program options
ifndef ebseqinfile
  $(error ebseqinfile is not specified $(PROG_USAGE))
endif
ifndef ebseqoutfile
  $(error ebseqoutfile is not specified $(PROG_USAGE))
endif
ifndef fasta
  $(error fasta is not specified $(PROG_USAGE))
endif
ifndef bamfilepattern
  bamfilepattern=*.bam
endif
bamfilelist=$(shell ls $(bamfilepattern) | tr '\n' ' ')
readsmappedfilelist=$(patsubst %.bam, %.rm, $(bamfilelist))

# Data files
foldchanges=$(workdir)/foldchanges.txt
readsmapped=$(workdir)/readsmapped.txt
output=$(workdir)/expression-data.txt
exprdata=$(workdir)/exprdata.txt
seqlist=$(workdir)/seqlist.txt
seqlengths=$(workdir)/seqlengths.txt
cvdata=$(workdir)/expcv.txt

.PRECIOUS:		$(readsmappedfilelist)

usage:
			@- echo "$$PROG_USAGE"

help:			usage
			

all:			$(output)
			

$(workdir):		
			mkdir -p $(workdir)

$(seqlist):		$(fasta) $(workdir)
			perl -ne 'm/^>(\S+)/ and print "$$1\n"' < $(fasta) > $(seqlist)

$(seqlengths):		$(fasta) $(workdir)
			perl $(BINDIR)/seqlengths < $(fasta) | sort -k1,1 > $(seqlengths)

$(BINDIR)/smr:		$(BINDIR)/smr.cpp
			g++ -Wall -O3 -std=c++11 -o $(BINDIR)/smr $(BINDIR)/smr.cpp

$(foldchanges):		$(ebseqoutfile) $(seqlist)
			$(BINDIR)/addmag < $(ebseqoutfile) > $(foldchanges).temp
			$(BINDIR)/fill $(seqlist) < <(tail -n +2 $(foldchanges).temp) | sort > $(foldchanges)

$(readsmapped):		$(readsmappedfilelist) $(workdir)
			$(BINDIR)/smrmerge $@ $(readsmappedfilelist)

%.rm:			%.bam $(BINDIR)/smr $(seqlist)
			$(BINDIR)/smr -d '\t' -o $@.temp <(samtools view $<)
			$(BINDIR)/fill $(seqlist) < $@.temp | sort > $@


$(exprdata):		$(ebseqinfile) $(seqlist)
			$(BINDIR)/norm-check --before=$(workdir)/pre-norm.png --after=$(workdir)/post-norm.png --out=$(exprdata).norm.temp < $(ebseqinfile)
			cat <(head -n 1 $(ebseqinfile) | perl -ne 'print "mol"; s/"([\t|\n])/.norm"$$1/g; print') <(tail -n +2 $(exprdata).norm.temp) > $(exprdata).norm
			paste $(ebseqinfile) <(cut -f 2- $(exprdata).norm) > $(exprdata).temp
			$(BINDIR)/fill $(seqlist) < <(tail -n +2 $(exprdata).temp | tr -d '"') | sort > $(exprdata)

$(cvdata):		$(exprdata)
			$(BINDIR)/expcv --norm=$(ebseqinfile) < $(ebseqinfile) > $(cvdata)

$(output):		$(foldchanges) $(readsmapped) $(exprdata) $(seqlengths) $(cvdata)
			# wc -l $(foldchanges) $(readsmapped) $(exprdata)
			paste $(seqlengths) <(cut -f 2- $(foldchanges)) <(cut -f 2- $(readsmapped)) <(cut -f 2- $(exprdata)) > $(output) <(cut -f 2- $(cvdata))
