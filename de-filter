#!/usr/bin/env Rscript

# Copyright (c) 2013-2014, Daniel S. Standage <daniel.standage@gmail.com>
#
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

# ------------------------------------------------------------------------------
# This program is used to apply filters to sequences to be used in a
# differential expression analysis. Following a preliminary differential
# expression analysis, the 'build-table' script is used to (you guessed it)
# build a table containing information about each reference sequence (gene,
# transcript, etc), such as the number of reads mapped, estimated expression
# levels, fold changes, and so on (for more information, see the source code for
# the 'build-table' script). This script is then used to filter the sequences
# based on user-supplied criteria.
# ------------------------------------------------------------------------------

library("getopt")

print_usage <- function(file=stderr())
{
  cat("
de-filter: analyze mapping data to filter genes or transcripts in a differential
           expression analysis

Usage: de-filter [options] < de-table.txt > filtered-de-table.txt
  Options:
    -D|--density: REAL,REAL      for each condition, the read density for each
                                 reference sequence is calculated by taking the
                                 sum of reads mapped across all replicates and
                                 normalizing by molecule length; this option
                                 specifies an acceptable range for this value;
                                 molecules with read density outside this range
                                 will be discarded; default is 0,Inf (i.e. no
                                 filtering)
    -h|--help                    print this help message and exit
    -H|--noheader                input file has no header
    -s|--numsamples: INT,INT     the number of replicates for each of the two
                                 conditions; if not provided explicitly, program
                                 will attempt to guess the number of reps per
                                 condition (total/2 reps each; will exit
                                 stubbornly but gracefully if total is odd)
    -r|--reads: INT,INT          for each condition, the number of reads mapped
                                 to each reference sequence is summed across all
                                 replicates; this option specifies an acceptable
                                 range for this value; sequences with more or
                                 fewer mapped reads than specified will be
                                 discarded; default is 0,Inf (i.e. no filtering)
    -v|--varcoef: REAL           specify maximum threshold for the variation
                                 coefficient (std dev / mean) as applied to 
                                 normalized expression values across replicates;
                                 default is Inf (i.e. no filtering)
    -z|--nonzeros: INT           option used to control variability across
                                 replicates within a condition; specifies minimum
                                 number of nonzero read density values required
                                 per condition; default is 0 (i.e. no filtering)\n\n",
    file=file)
}

spec <- matrix( c("column",      'c', 1, "integer",
                  "density",     'D', 1, "character",
                  "debug",       'd', 0, "logical",
                  "help",        'h', 0, "logical",
                  "noheader",    'H', 0, "logical",
                  "numsamples",  's', 1, "character",
                  "reads",       'r', 1, "character",
                  "varcoef",     'v', 1, "double",
                  "nonzeros",    'z', 1, "integer"),
                byrow=TRUE, ncol=4)

opt <- getopt(spec)
if(!is.null(opt$help))
{
  print_usage(file=stdout());
  q(save="no", status=0);
}

# Set option defaults
if( is.null(opt$column) )    { opt$column    <- 9 }
if( is.null(opt$debug) )     { opt$debug     <- FALSE }
if( is.null(opt$noheader) )  { opt$hasheader <- TRUE } else { opt$hasheader <- FALSE }
if( is.null(opt$reads) )     { opt$reads     <- "0,Inf" }
if( is.null(opt$density) )   { opt$density   <- "0.0,Inf" }
if( is.null(opt$varcoef) )   { opt$varcoef <- Inf }
if( is.null(opt$nonzeros) )  { opt$nonzeros  <- 0 }

reads     <- as.numeric(unlist(strsplit(opt$reads, ",")))
readdensity <- as.numeric(unlist(strsplit(opt$density, ",")))

data <- read.table(file("stdin"), header=opt$hasheader, sep="\t", quote="")
data.dim <- dim(data)
if( is.null(opt$numsamples) )
{
  total.samples <- (data.dim[2] - (opt$column - 1)) / 3
  half.samples <- as.integer(total.samples / 2)
  if(total.samples %% 2 == 0)
  {
    opt$numsamples <- sprintf("%d,%d", half.samples, half.samples)
  }
  else
  {
    cat(paste("error: cannot guess number of samples for each condition; please",
              "provide this information\n"),
        file=stderr())
    print_usage(file=stderr())
    q(save="no", status=1)
  }
}
num.samples <- as.integer(unlist(strsplit(opt$numsamples, ",")))

if(opt$debug)
{
  cat(sprintf("Table dimensions:         %dx%d\n", data.dim[1], data.dim[2]),
      file=stderr())
  cat(sprintf("Number of samples:        %d,%d\n", num.samples[1],
      num.samples[2]), file=stderr())
  cat(sprintf("Reads per condition:      [%.0f, %.0f]\n", reads[1], reads[2]),
      file=stderr())
  cat(sprintf("Reads/bp per condition:   [%.2f, %.2f]\n", readdensity[1],
      readdensity[2]), file=stderr())
  cat(sprintf("Variability coefficient:  %.2f\n", opt$varcoef), file=stderr())
  cat(sprintf("Min non-0s per condition: %d\n", opt$nonzeros), file=stderr())
}

c1.cols <- c(opt$column,                opt$column+num.samples[1]-1)
c2.cols <- c(opt$column+num.samples[1], opt$column+num.samples[1]+num.samples[2]-1)
c1.exp.cols <- c(opt$column+(2*num.samples[1])+(2*num.samples[2]),
                 opt$column+(3*num.samples[1])+(2*num.samples[2])-1)
c2.exp.cols <- c(opt$column+(3*num.samples[1])+(2*num.samples[2]),
                 opt$column+(3*num.samples[1])+(3*num.samples[2])-1)

data.c1.reads <- data[,c1.cols[1]:c1.cols[2]]
data.c2.reads <- data[,c2.cols[1]:c2.cols[2]]
data.c1.exp.reads <- data[,c1.exp.cols[1]:c1.exp.cols[2]]
data.c2.exp.reads <- data[,c2.exp.cols[1]:c2.exp.cols[2]]

data.readsmapped.c1 <- rowSums(data.c1.reads)
data.readsmapped.c2 <- rowSums(data.c2.reads)
data.rmpbp.c1       <- data.readsmapped.c1 / data$V2
data.rmpbp.c2       <- data.readsmapped.c2 / data$V2
data.samples.c1     <- rowSums(data.c1.reads > 0)
data.samples.c2     <- rowSums(data.c2.reads > 0)
data.means.c1       <- as.numeric(apply(data.c1.exp.reads, 1, mean))
data.means.c2       <- as.numeric(apply(data.c2.exp.reads, 1, mean))
data.stdevs.c1      <- as.numeric(apply(data.c1.exp.reads, 1, sd))
data.stdevs.c2      <- as.numeric(apply(data.c2.exp.reads, 1, sd))

indices.to.keep <- data.readsmapped.c1 >= reads[1] &
                   data.readsmapped.c2 >= reads[1] &
                   data.readsmapped.c1 <= reads[2] &
                   data.readsmapped.c2 <= reads[2] &
                   data.rmpbp.c1 >= readdensity[1] &
                   data.rmpbp.c2 >= readdensity[1] &
                   data.rmpbp.c1 <= readdensity[2] &
                   data.rmpbp.c2 <= readdensity[2] &
                   data.samples.c1 >= opt$nonzeros &
                   data.samples.c2 >= opt$nonzeros &
                   data.means.c1 > 0 &
                   data.means.c2 > 0 &
                   data.stdevs.c1 / data.means.c1 < opt$varcoef &
                   data.stdevs.c2 / data.means.c2 < opt$varcoef
data.to.keep <- data[indices.to.keep,]
write.table(data.to.keep, file="", sep="\t", quote=FALSE, row.names=FALSE,
            col.names=opt$hasheader)
